// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/unmango/cloudflare-operator/internal/client (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination ../testing/client.go -package testing . Client
//

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	dns "github.com/cloudflare/cloudflare-go/v4/dns"
	zero_trust "github.com/cloudflare/cloudflare-go/v4/zero_trust"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateDnsRecord mocks base method.
func (m *MockClient) CreateDnsRecord(ctx context.Context, params dns.RecordNewParams) (*dns.RecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDnsRecord", ctx, params)
	ret0, _ := ret[0].(*dns.RecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDnsRecord indicates an expected call of CreateDnsRecord.
func (mr *MockClientMockRecorder) CreateDnsRecord(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDnsRecord", reflect.TypeOf((*MockClient)(nil).CreateDnsRecord), ctx, params)
}

// CreateTunnel mocks base method.
func (m *MockClient) CreateTunnel(ctx context.Context, params zero_trust.TunnelCloudflaredNewParams) (*zero_trust.TunnelCloudflaredNewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTunnel", ctx, params)
	ret0, _ := ret[0].(*zero_trust.TunnelCloudflaredNewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTunnel indicates an expected call of CreateTunnel.
func (mr *MockClientMockRecorder) CreateTunnel(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTunnel", reflect.TypeOf((*MockClient)(nil).CreateTunnel), ctx, params)
}

// DeleteDnsRecord mocks base method.
func (m *MockClient) DeleteDnsRecord(ctx context.Context, recordId string, params dns.RecordDeleteParams) (*dns.RecordDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDnsRecord", ctx, recordId, params)
	ret0, _ := ret[0].(*dns.RecordDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDnsRecord indicates an expected call of DeleteDnsRecord.
func (mr *MockClientMockRecorder) DeleteDnsRecord(ctx, recordId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDnsRecord", reflect.TypeOf((*MockClient)(nil).DeleteDnsRecord), ctx, recordId, params)
}

// DeleteTunnel mocks base method.
func (m *MockClient) DeleteTunnel(ctx context.Context, tunnelId string, params zero_trust.TunnelCloudflaredDeleteParams) (*zero_trust.TunnelCloudflaredDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTunnel", ctx, tunnelId, params)
	ret0, _ := ret[0].(*zero_trust.TunnelCloudflaredDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTunnel indicates an expected call of DeleteTunnel.
func (mr *MockClientMockRecorder) DeleteTunnel(ctx, tunnelId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTunnel", reflect.TypeOf((*MockClient)(nil).DeleteTunnel), ctx, tunnelId, params)
}

// EditTunnel mocks base method.
func (m *MockClient) EditTunnel(ctx context.Context, tunnelId string, params zero_trust.TunnelCloudflaredEditParams) (*zero_trust.TunnelCloudflaredEditResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTunnel", ctx, tunnelId, params)
	ret0, _ := ret[0].(*zero_trust.TunnelCloudflaredEditResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTunnel indicates an expected call of EditTunnel.
func (mr *MockClientMockRecorder) EditTunnel(ctx, tunnelId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTunnel", reflect.TypeOf((*MockClient)(nil).EditTunnel), ctx, tunnelId, params)
}

// GetDnsRecord mocks base method.
func (m *MockClient) GetDnsRecord(ctx context.Context, recordId string, params dns.RecordGetParams) (*dns.RecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDnsRecord", ctx, recordId, params)
	ret0, _ := ret[0].(*dns.RecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDnsRecord indicates an expected call of GetDnsRecord.
func (mr *MockClientMockRecorder) GetDnsRecord(ctx, recordId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDnsRecord", reflect.TypeOf((*MockClient)(nil).GetDnsRecord), ctx, recordId, params)
}

// GetTunnel mocks base method.
func (m *MockClient) GetTunnel(ctx context.Context, tunnelId string, params zero_trust.TunnelCloudflaredGetParams) (*zero_trust.TunnelCloudflaredGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnel", ctx, tunnelId, params)
	ret0, _ := ret[0].(*zero_trust.TunnelCloudflaredGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnel indicates an expected call of GetTunnel.
func (mr *MockClientMockRecorder) GetTunnel(ctx, tunnelId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnel", reflect.TypeOf((*MockClient)(nil).GetTunnel), ctx, tunnelId, params)
}

// GetTunnelToken mocks base method.
func (m *MockClient) GetTunnelToken(ctx context.Context, tunnelId string, params zero_trust.TunnelCloudflaredTokenGetParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelToken", ctx, tunnelId, params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelToken indicates an expected call of GetTunnelToken.
func (mr *MockClientMockRecorder) GetTunnelToken(ctx, tunnelId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelToken", reflect.TypeOf((*MockClient)(nil).GetTunnelToken), ctx, tunnelId, params)
}

// UpdateConfiguration mocks base method.
func (m *MockClient) UpdateConfiguration(ctx context.Context, tunnelId string, params zero_trust.TunnelCloudflaredConfigurationUpdateParams) (*zero_trust.TunnelCloudflaredConfigurationUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", ctx, tunnelId, params)
	ret0, _ := ret[0].(*zero_trust.TunnelCloudflaredConfigurationUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockClientMockRecorder) UpdateConfiguration(ctx, tunnelId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockClient)(nil).UpdateConfiguration), ctx, tunnelId, params)
}
